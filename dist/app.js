!function(e){"use strict";function t(){}var n=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;t.extend=function(e){var i=this.prototype,s=Object.create(i);for(var o in e)s[o]="function"==typeof e[o]&&"function"==typeof i[o]&&n.test(e[o])?function(e,t){return function(){var n=this._super;this._super=i[e];var s=t.apply(this,arguments);return this._super=n,s}}(o,e[o]):e[o];var a="function"==typeof s.init?s.hasOwnProperty("init")?s.init:function(){i.init.apply(this,arguments)}:function(){};return a.prototype=s,s.constructor=a,a.extend=t.extend,a},e.Class=t}(this);var BaseController=Class.extend({scope:null,init:function(e){this.$scope=e,this.defineListeners(),this.defineScope()},defineListeners:function(){this.$scope.$on("$destroy",this.destroy.bind(this))},defineScope:function(){},destroy:function(e){}});BaseController.$inject=["$scope"];var BaseDirective=Class.extend({scope:null,init:function(e){this.$scope=e,this.defineListeners(),this.defineScope()},defineListeners:function(){this.$scope.$on("$destroy",this.destroy.bind(this))},defineScope:function(){},destroy:function(e){}});BaseDirective.$inject=["$scope"];var EventDispatcher=Class.extend({_listeners:{},addEventListener:function(e,t){this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t)},removeEventListener:function(e,t){if(this._listeners[e]){var n=this._listeners[e].indexOf(t);-1!==n&&this._listeners[e].splice(n,1)}},dispatchEvent:function(){var e;if("string"!=typeof arguments[0])console.warn("EventDispatcher","First params must be an event type (String)");else{e=this._listeners[arguments[0]];for(var t in e)e[t](arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6])}}});window.namespace=function(e){"use strict";var t=e.split("."),n=window,i=null,s=null;for(s in t)i=t[s],void 0===n[i]&&(n[i]={}),n=n[i];return n},function(){"use strict";var e=Class.extend({instance:new EventDispatcher,$get:[function(){return this.instance.notify=this.instance.dispatchEvent,this.instance}]});angular.module("notifications",[]).provider("Notifications",e)}(),angular.module("playfab",["notifications","navbar","users.UserModel","users.UserService","duxter.ConfigModel","ui.router","ngCookies","ngAnimate"]).config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/gym/map"),e.state("gymMap",{url:"/gym/map",templateUrl:"partials/gym/map/map.html",controller:GymMapController}).state("userSettings",{url:"/users/:id/settings",templateUrl:"partials/settingsPage.html"})}]),namespace("models.events").CONFIG_LOADED="ActivityModel.CONFIG_LOADED";var ConfigModel=EventDispatcher.extend({notifications:null,config:null});!function(){var e=Class.extend({instance:new ConfigModel,$get:["Notifications","$cookies","$http",function(e,t,n){return this.instance.notifications=e,this.instance.$cookies=t,this.instance.config={baseURL:"http://playfab-staging.duxapi.com"},this.instance}]});angular.module("duxter.ConfigModel",[]).provider("ConfigModel",e)}(),namespace("models.events").GAME_LOADED="ActivityModel.GAME_LOADED";var GameModel=EventDispatcher.extend({game:{image:"images/unicorn.png",title:"UNICORN BATTLE"},notifications:null,gameService:null,getGameById:function(e){this.GameService.getGameById(e)}});!function(){var e=Class.extend({instance:new GameModel,$get:["Notifications","GameService",function(e,t){return this.instance.notifications=e,this.instance.gameService=t,this.instance}]});angular.module("games.GameModel",[]).provider("GameModel",e)}(),namespace("models.events").USER_SIGNED_IN="ActivityModel.USER_SIGNED_IN",namespace("models.events").USER_SIGNED_OUT="ActivityModel.USER_SIGNED_OUT",namespace("models.events").USER_UPDATED="ActivityModel.USER_UPDATED",namespace("models.events").PROFILE_LOADED="ActivityModel.PROFILE_LOADED",namespace("models.events").AUTH_ERROR="ActivityModel.AUTH_ERROR",namespace("models.events").NETWORK_ERROR="ActivityModel.NETWORK_ERROR";var UserModel=EventDispatcher.extend({currentUser:null,UserService:null,notifications:null,signIn:function(e,t){var n=this.UserService.signIn(e,t);n.then(function(e){console.log("success"),console.log(e),this.currentUser=e.data.user,this.notifications.notify(models.events.USER_SIGNED_IN)}.bind(this),function(e){console.log("error"),console.log(e),e.data?this.notifications.notify(models.events.AUTH_ERROR,e):this.notifications.notify(models.events.NETWORK_ERROR)}.bind(this))},signOut:function(){},updateUser:function(e){this.UserService.updateUser(e)}});!function(){var e=Class.extend({instance:new UserModel,$get:["UserService","Notifications","$cookies",function(e,t,n){return this.instance.UserService=e,this.instance.notifications=t,this.instance.$cookies=n,this.instance}]});angular.module("users.UserModel",[]).provider("UserModel",e)}();var GameService=Class.extend({$http:null,getGameById:function(e){}});!function(){var e=Class.extend({instance:new GameService,$get:["$http",function(e){return this.instance.$http=e,this.instance}]});angular.module("games.GameService",[]).provider("GameService",e)}(),function(e){e.fn.rwdImageMaps=function(){var t=this,n=function(){t.each(function(){if("undefined"!=typeof e(this).attr("usemap")){var t=this,n=e(t);e("<img />").load(function(){var t="width",i="height",s=n.attr(t),o=n.attr(i);if(!s||!o){var a=new Image;a.src=n.attr("src"),s||(s=a.width),o||(o=a.height)}var r=n.width()/100,c=n.height()/100,l=n.attr("usemap").replace("#",""),u="coords";e('map[name="'+l+'"]').find("area").each(function(){var t=e(this);t.data(u)||t.data(u,t.attr(u));for(var n=t.data(u).split(","),i=new Array(n.length),a=0;a<i.length;++a)i[a]=parseInt(a%2===0?n[a]/s*100*r:n[a]/o*100*c);t.attr(u,i.toString())})}).attr("src",n.attr("src"))}})};return e(window).resize(n).trigger("resize"),this}}(jQuery);var UserService=Class.extend({$http:null,configModel:null,signIn:function(e,t){var n=this.configModel.config.baseURL+"/login/playfab",i={method:"POST",url:n,headers:{"Content-Type":"application/json"},data:{email:e,password:t}};return console.log(i),this.$http(i)},signOut:function(){},updateUser:function(e){}});!function(){var e=Class.extend({instance:new UserService,$get:["$http","$cookies","ConfigModel",function(e,t,n){return this.instance.configModel=n,this.instance.$http=e,this.instance}]});angular.module("users.UserService",[]).provider("UserService",e)}();var NavBarDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,n){this.userModel=t,this.notifications=n,this._super(e)},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserSignedIn.bind(this)),this.$scope.logout=this.logout.bind(this)},defineScope:function(){this.navShowing=!1,this.$scope.currentUser=this.userModel.currentUser,this.initNav()},initNav:function(){var e=document.getElementById("js-mobile-menu"),t=document.getElementById("js-navigation-menu");t.className=t.className.replace(/\bshow\b/,""),e.addEventListener("click",function(e){e.preventDefault(),t.className=this.navShowing?t.className.replace(/\bshow\b/,""):t.className+" show",this.navShowing=!this.navShowing}.bind(this))},logout:function(){this.userModel.logout(),this.$location.url("/")},handleUserSignedIn:function(){this.$scope.currentUser=this.userModel.currentUser}});angular.module("navbar",[]).directive("navbar",["UserModel","Notifications",function(e,t){return{restrict:"E",isolate:!0,link:function(n){new NavBarDirective(n,e,t)},scope:!0,templateUrl:"partials/navbar/navbar.html"}}]);var GymMapController=BaseController.extend({notifications:null,init:function(e,t){this.notifications=t,this._super(e)},defineListeners:function(){this._super(),this.$scope.areaClicked=this.areaClicked.bind(this),window.onresize=this.resize.bind(this)},defineScope:function(){$(document).ready(function(e){$("img[usemap]").rwdImageMaps(),console.log("done")}),this.highlightMap()},destroy:function(){},areaClicked:function(){console.log("RCH")},highlightMap:function(){for(var e=$("#gymMap")[0],t=0;t<e.children.length;t++){var n=e.children[t],i=n.coords.split(", ");console.log(i);var s=document.createElement("canvas");document.body.appendChild(s);var o=s.getContext("2d");o.fillStyle="#f00",o.beginPath();var a=i[0],r=i[1];console.log("x: "+a),console.log("y: "+r),o.moveTo(i[0],i[1]),console.log(i.length);for(var c=2;c<i.length-1;c+=2)a=i[c],r=i[c+1],console.log("x: "+a),console.log("y: "+r),console.log("j: "+c),o.lineTo(a,r);o.lineTo(100,50),o.lineTo(50,100),o.lineTo(0,90),o.closePath(),o.fill()}},resize:function(){}});GymMapController.$inject=["$scope","Notifications"];
//# sourceMappingURL=data:application/json;base64,