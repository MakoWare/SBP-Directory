!function(e){"use strict";function t(){}var i=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;t.extend=function(e){var n=this.prototype,s=Object.create(n);for(var o in e)s[o]="function"==typeof e[o]&&"function"==typeof n[o]&&i.test(e[o])?function(e,t){return function(){var i=this._super;this._super=n[e];var s=t.apply(this,arguments);return this._super=i,s}}(o,e[o]):e[o];var a="function"==typeof s.init?s.hasOwnProperty("init")?s.init:function(){n.init.apply(this,arguments)}:function(){};return a.prototype=s,s.constructor=a,a.extend=t.extend,a},e.Class=t}(this);var BaseController=Class.extend({scope:null,init:function(e){this.$scope=e,this.defineListeners(),this.defineScope()},defineListeners:function(){this.$scope.$on("$destroy",this.destroy.bind(this))},defineScope:function(){},destroy:function(e){}});BaseController.$inject=["$scope"];var BaseDirective=Class.extend({scope:null,init:function(e){this.$scope=e,this.defineListeners(),this.defineScope()},defineListeners:function(){this.$scope.$on("$destroy",this.destroy.bind(this))},defineScope:function(){},destroy:function(e){}});BaseDirective.$inject=["$scope"];var EventDispatcher=Class.extend({_listeners:{},addEventListener:function(e,t){this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t)},removeEventListener:function(e,t){if(this._listeners[e]){var i=this._listeners[e].indexOf(t);-1!==i&&this._listeners[e].splice(i,1)}},dispatchEvent:function(){var e;if("string"!=typeof arguments[0])console.warn("EventDispatcher","First params must be an event type (String)");else{e=this._listeners[arguments[0]];for(var t in e)e[t](arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6])}}});window.namespace=function(e){"use strict";var t=e.split("."),i=window,n=null,s=null;for(s in t)n=t[s],void 0===i[n]&&(i[n]={}),i=i[n];return i},function(){"use strict";var e=Class.extend({instance:new EventDispatcher,$get:[function(){return this.instance.notify=this.instance.dispatchEvent,this.instance}]});angular.module("notifications",[]).provider("Notifications",e)}(),angular.module("sbp",["notifications","navbar","GymModel","WallModel","wallList","wallListItem","RouteModel","routeList","routeListItem","UserModel","ParseService","ui.router","ngCookies","ngAnimate"]),angular.module("sbp").config(["$stateProvider","$urlRouterProvider",function(e,t){var i=function(e){return e.getDefaultGym()};i.$inject=["GymModel"],t.otherwise("/gym/map"),e.state("gymMap",{url:"/gym/map",templateUrl:"partials/gym/map/map.html",controller:GymMapController,resolve:{initGym:i}}).state("walls",{url:"/walls",templateUrl:"partials/walls/wallsPage.html",resolve:{initGym:i}}).state("wall",{url:"/walls/:id",templateUrl:"partials/walls/wallPage.html",controller:WallController,resolve:{initGym:i}}).state("routes",{url:"/routes",templateUrl:"partials/routes/routes.html",resolve:{initGym:i}}).state("userSettings",{url:"/users/:id/settings",templateUrl:"partials/settingsPage.html",resolve:{initGym:i}})}]),namespace("models.events").GYM_LOADED="ActivityModel.GYM_LOADED",namespace("models.events").GYMS_LOADED="ActivityModel.GYMS_LOADED";var GymModel=EventDispatcher.extend({gym:{},gyms:[],notifications:null,parseService:null,getDefaultGym:function(){return this.parseService.getDefaultGym(function(e){this.gym=e}.bind(this))},getGymById:function(e){},getGyms:function(e){}});!function(){var e=Class.extend({instance:new GymModel,$get:["Notifications","ParseService",function(e,t){return this.instance.notifications=e,this.instance.parseService=t,this.instance}]});angular.module("GymModel",[]).provider("GymModel",e)}(),namespace("models.events").ROUTE_LOADED="ActivityModel.ROUTE_LOADED";var RouteModel=EventDispatcher.extend({route:{},routes:[],notifications:null,gameService:null,getRouteById:function(e){this.GameService.getGameById(e)},getRoutesByWall:function(e){},createRoute:function(e){},saveRoute:function(e){},saveRoutes:function(e){}});!function(){var e=Class.extend({instance:new RouteModel,$get:["Notifications","ParseService",function(e,t){return this.instance.notifications=e,this.instance.parseService=t,this.instance}]});angular.module("RouteModel",[]).provider("RouteModel",e)}(),namespace("models.events").USER_SIGNED_IN="ActivityModel.USER_SIGNED_IN",namespace("models.events").USER_SIGNED_OUT="ActivityModel.USER_SIGNED_OUT",namespace("models.events").USER_UPDATED="ActivityModel.USER_UPDATED",namespace("models.events").PROFILE_LOADED="ActivityModel.PROFILE_LOADED",namespace("models.events").AUTH_ERROR="ActivityModel.AUTH_ERROR",namespace("models.events").NETWORK_ERROR="ActivityModel.NETWORK_ERROR";var UserModel=EventDispatcher.extend({currentUser:null,ParseService:null,notifications:null,signIn:function(e,t){},signOut:function(){},updateUser:function(e){}});!function(){var e=Class.extend({instance:new UserModel,$get:["ParseService","Notifications",function(e,t){return this.instance.ParseService=e,this.instance.notifications=t,this.instance}]});angular.module("UserModel",[]).provider("UserModel",e)}(),namespace("models.events").WALL_LOADED="ActivityModel.WALL_LOADED",namespace("models.events").WALLS_LOADED="ActivityModel.WALLS_LOADED";var WallModel=EventDispatcher.extend({wall:{},walls:[],notifications:null,parseService:null,getWallById:function(e){return this.parseService.getWallById(e,function(e){this.wall=e,this.notifications.notify(models.events.WALL_LOADED)}.bind(this))},getWallsByGym:function(e){return this.parseService.getWallsByGym(e,function(e){this.walls=e,this.notifications.notify(models.events.WALLS_LOADED)}.bind(this))},createWall:function(e){},saveWall:function(e){},deleteWall:function(e){}});!function(){var e=Class.extend({instance:new WallModel,$get:["Notifications","ParseService",function(e,t){return this.instance.notifications=e,this.instance.parseService=t,this.instance}]});angular.module("WallModel",[]).provider("WallModel",e)}(),function(e){e.fn.rwdImageMaps=function(){var t=this,i=function(){t.each(function(){if("undefined"!=typeof e(this).attr("usemap")){var t=this,i=e(t);e("<img />").load(function(){var t="width",n="height",s=i.attr(t),o=i.attr(n);if(!s||!o){var a=new Image;a.src=i.attr("src"),s||(s=a.width),o||(o=a.height)}var r=i.width()/100,l=i.height()/100,c=i.attr("usemap").replace("#",""),u="coords";e('map[name="'+c+'"]').find("area").each(function(){var t=e(this);t.data(u)||t.data(u,t.attr(u));for(var i=t.data(u).split(","),n=new Array(i.length),a=0;a<n.length;++a)n[a]=parseInt(a%2===0?i[a]/s*100*r:i[a]/o*100*l);t.attr(u,n.toString())})}).attr("src",i.attr("src"))}})};return e(window).resize(i).trigger("resize"),this}}(jQuery);var ParseService=Class.extend({Gym:Parse.Object.extend("Gym"),Wall:Parse.Object.extend("Wall"),Route:Parse.Object.extend("Route"),Hold:Parse.Object.extend("Hold"),signIn:function(e,t){},signOut:function(){},updateUser:function(e){},getDefaultGym:function(e){var t=new Parse.Query(this.Gym);return t.get("4WChpaHxDE",{success:function(t){e(t)},error:function(t){e(t)}})},getWallsByGym:function(e,t){var i=new Parse.Query(this.Wall);i.equalTo("gym",e),i.find({success:function(e){t(e)},error:function(e){t(e)}})},getWallById:function(e,t){var i=new Parse.Query(this.Wall);return i.get(e,{success:function(e){t(e)},error:function(e){t(e)}})}});!function(){var e=Class.extend({instance:new ParseService,$get:function(){return Parse.initialize("NKnM9iqa0hnqZhA1M2TdyDYMMMVpW24QNcqaSZ2Y","k7cekvXmYutKXkuSuOp2scFgbkRnAUdQMh4SewsG"),this.instance}});angular.module("ParseService",[]).provider("ParseService",e)}(),namespace("models.events").BRAND_CHANGE="ActivityModel.BRAND_CHANGE";var NavBarDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,i){this.userModel=t,this.notifications=i,this._super(e)},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserSignedIn.bind(this)),this.notifications.addEventListener(models.events.BRAND_CHANGE,this.handleBrandChange.bind(this)),this.$scope.logout=this.logout.bind(this)},defineScope:function(){this.navShowing=!1,this.$scope.brand="SBP",this.$scope.currentUser=this.userModel.currentUser,$(".button-collapse").sideNav()},logout:function(){this.userModel.logout(),this.$location.url("/")},handleUserSignedIn:function(){this.$scope.currentUser=this.userModel.currentUser},handleBrandChange:function(e,t){this.$scope.brand=t}});angular.module("navbar",[]).directive("navbar",["UserModel","Notifications",function(e,t){return{restrict:"E",isolate:!0,link:function(i){new NavBarDirective(i,e,t)},scope:!0,templateUrl:"partials/navbar/navbar.html"}}]);var WallController=BaseController.extend({notifications:null,init:function(e,t,i,n,s,o){this.$state=t,this.gymModel=n,this.wallModel=s,this.userModel=o,this.notifications=i,this._super(e),$(document).ready(function(){$("ul.tabs").tabs()}),this.wallModel.getWallById(this.$state.params.id)},defineListeners:function(){this._super()},defineScope:function(){this.notifications.addEventListener(models.events.WALL_LOADED,this.handleWallLoaded.bind(this))},destroy:function(){},handleWallLoaded:function(){this.$scope.wall=this.wallModel.wall,this.notifications.notify(models.events.BRAND_CHANGE,this.$scope.wall.get("name"))}});WallController.$inject=["$scope","$state","Notifications","GymModel","WallModel","UserModel"];var WallListDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,i,n,s){this.wallModel=t,this.gymModel=i,this.userModel=n,this.notifications=s,this._super(e),this.getWalls()},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserChange.bind(this)),this.notifications.addEventListener(models.events.USER_SIGNED_OUT,this.handleUserChange.bind(this)),this.notifications.addEventListener(models.events.WALLS_LOADED,this.handleWallsChange.bind(this))},defineScope:function(){this.$scope.walls=[]},getWalls:function(){this.wallModel.getWallsByGym(this.gymModel.gym)},handleUserChange:function(){this.$scope.currentUser=this.userModel.currentUser},handleWallsChange:function(){this.$scope.walls=this.wallModel.walls,console.log(this.$scope.walls)}});angular.module("wallList",[]).directive("wallList",["WallModel","GymModel","UserModel","Notifications",function(e,t,i,n){return{restrict:"E",isolate:!0,link:function(s){new WallListDirective(s,e,t,i,n)},scope:!0,templateUrl:"partials/walls/wallList.html"}}]);var WallListItemDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,i,n,s){this.wallModel=t,this.gymModel=i,this.userModel=n,this.notifications=s,this._super(e)},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserChange.bind(this)),this.notifications.addEventListener(models.events.USER_SIGNED_OUT,this.handleUserChange.bind(this)),this.notifications.addEventListener(models.events.WALLS_LOADED,this.handleWallsChange.bind(this))},defineScope:function(){this.$scope.walls=[]},getWalls:function(){this.wallModel.getWallsByGym(this.gymModel.gym)},handleUserChange:function(){this.$scope.currentUser=this.userModel.currentUser},handleWallsChange:function(){this.$scope.walls=this.wallModel.walls,console.log(this.$scope.walls)}});angular.module("wallListItem",[]).directive("wallListItem",["WallModel","GymModel","UserModel","Notifications",function(e,t,i,n){return{restrict:"E",isolate:!0,link:function(s){new WallListItemDirective(s,e,t,i,n)},scope:!1,templateUrl:"partials/walls/wallListItem.html"}}]);var GymMapController=BaseController.extend({notifications:null,rootCanvas:null,rootImage:null,init:function(e,t){this.notifications=t,this._super(e)},defineListeners:function(){this._super(),this.$scope.areaClicked=this.areaClicked.bind(this),window.onresize=this.onResize.bind(this)},defineScope:function(){var e=this;$(document).ready(function(t){e.rootImage=$(".imageLayer img").on("load.omgmaps",function(t){$(this).rwdImageMaps(),e.highlightMap()}).css("opacity","0"),console.log("done")})},destroy:function(){$("area").off(".omgmaps"),$("img").off(".omgmaps")},areaClicked:function(){console.log("RCH")},createRootCanvas:function(){var e=this.rootImage,t=e.width(),i=e.height();this.rootCanvas=$("<canvas>").attr("width",t).attr("height",i),this.rootCanvas.css({position:"absolute",top:"0px",left:"0px",height:"auto"}),e.before(this.rootCanvas);var n=this.rootCanvas.get(0).getContext("2d");n.drawImage(e.get(0),0,0,t,i)},redrawRootCanvas:function(){var e=this.rootImage,t=e.width(),i=e.height(),n=this.rootCanvas.get(0).getContext("2d");n.clearRect(0,0,this.rootCanvas.get(0).width,this.rootCanvas.get(0).width),this.rootCanvas.attr("width",t).attr("height",i),n.drawImage(e.get(0),0,0,e.width(),e.height())},highlightMap:function(){{var e=($("body"),$(".mapContent")),t=$("#gymMap"),i=($("#gymMap").get(0),t.find("area")),n=this.rootImage,s=n.width(),o=n.height(),a=n.attr("width"),r=n.attr("height"),l=parseFloat(s/a),c=parseFloat(o/r);this.createRootCanvas()}$.each(i,function(t,i){var i=$(i),n=i.get(0),a=n.coords.split(", ");a=a.map(function(e,t){return t%2===0?e*l:e*c});var r=$("<canvas>").attr("width",s).attr("height",o).addClass("map-overlay");r.css({position:"absolute",top:"0px",left:"0px",opacity:"0.0",display:"none"}),e.find("img").before(r);var u=r.get(0).getContext("2d");u.fillStyle="#f00";var d=a[0],h=a[1];u.beginPath(),u.moveTo(d,h);for(var f=2,v=a.length;v-1>f;f+=2)d=a[f],h=a[f+1],u.lineTo(d,h);u.closePath(),u.fill(),i.on("mouseenter.omgmaps",function(e){return function(t){t.preventDefault(),e.css("display","block"),e.animate({opacity:"1.0"},200,"linear")}}(r)),i.on("mouseleave.omgmaps",function(e){return function(t){t.preventDefault(),e.animate({opacity:"0.0"},200,"linear",function(){e.css("display","none")})}}(r)),i.on("click.omgmaps",function(e){return function(e){e.preventDefault(),console.log("click")}}(r))})},onResize:function(){var e=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(function(){e.resize()},200)},resize:function(){var e=this;console.log("resize"),this.rootCanvas&&this.redrawRootCanvas(),$("canvas.map-overlay").each(function(t,i){i=$(i),i.css({height:e.rootImage.height(),width:e.rootImage.width()})})}});GymMapController.$inject=["$scope","Notifications"];var RouteListDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,i){this.userModel=t,this.notifications=i,this._super(e)},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserSignedIn.bind(this)),this.$scope.logout=this.logout.bind(this)},defineScope:function(){console.log("routeListDirective"),this.$scope.routes=[];var e={grade:5,color:"blue"};this.$scope.routes.push(e),e={grade:6,color:"orange"},this.$scope.routes.push(e),e={grade:7,color:"purple"},this.$scope.routes.push(e),console.log(this.$scope.routes)},logout:function(){this.userModel.logout(),this.$location.url("/")},handleUserSignedIn:function(){this.$scope.currentUser=this.userModel.currentUser}});angular.module("routeList",[]).directive("routeList",["UserModel","Notifications",function(e,t){return{restrict:"E",isolate:!0,link:function(i){new RouteListDirective(i,e,t)},scope:!0,templateUrl:"partials/routes/routeList.html"}}]);var RouteListItemDirective=BaseDirective.extend({userModel:null,notifications:null,init:function(e,t,i){this.userModel=t,this.notifications=i,this._super(e)},defineListeners:function(){this.notifications.addEventListener(models.events.USER_SIGNED_IN,this.handleUserSignedIn.bind(this)),this.$scope.logout=this.logout.bind(this)},defineScope:function(){this.navShowing=!1,this.$scope.currentUser=this.userModel.currentUser},logout:function(){this.userModel.logout(),this.$location.url("/")},handleUserSignedIn:function(){this.$scope.currentUser=this.userModel.currentUser}});angular.module("routeListItem",[]).directive("routeListItem",["UserModel","Notifications",function(e,t){return{restrict:"E",isolate:!0,link:function(i){new RouteListItemDirective(i,e,t)},scope:!0,templateUrl:"partials/routes/routeListItem.html"}}]);
//# sourceMappingURL=data:application/json;base64,